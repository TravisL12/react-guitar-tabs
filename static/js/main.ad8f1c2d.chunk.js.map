{"version":3,"sources":["Models/chord.js","components/Measure/Chord/index.js","components/Measure/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["GUITAR_STRINGS","isNotes","highE","b","g","d","a","lowE","ChordModel","concatString","guitarString","notes","pulloffs","hammerons","slides","bends","join","print","this","display","Chord","isStaff","isEnd","notesProp","useState","className","defaultProps","CHORD_COUNT","Measure","chordCountProp","chordCount","chords","Array","from","length","v","k","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iUAOMA,EAAiB,SAAAC,GAAO,MAAK,CAC/BC,MAAOD,GARE,IASTE,EAAGF,GATM,IAUTG,EAAGH,GAVM,IAWTI,EAAGJ,GAXM,IAYTK,EAAGL,GAZM,IAaTM,KAAMN,GAbG,MAoDEO,EAnCX,aAAe,IAAD,gCAYdC,aAAe,SAAAC,GACX,MAAO,CACH,EAAKC,MAAMD,GACX,EAAKE,SAASF,GACd,EAAKG,UAAUH,GACf,EAAKI,OAAOJ,GACZ,EAAKK,MAAML,IACbM,KAAK,KAnBG,KAyBdC,MAAQ,iBAAO,CACXf,MAAO,EAAKO,aAAa,SACzBN,EAAG,EAAKM,aAAa,KACrBL,EAAG,EAAKK,aAAa,KACrBJ,EAAG,EAAKI,aAAa,KACrBH,EAAG,EAAKG,aAAa,KACrBF,KAAM,EAAKE,aAAa,UA9BxBS,KAAKP,MAAQX,GAAe,GAC5BkB,KAAKN,SAAWZ,IAChBkB,KAAKL,UAAYb,IACjBkB,KAAKJ,OAASd,IACdkB,KAAKH,MAAQf,IACbkB,KAAKC,QAAUD,KAAKD,SCnB5B,SAASG,EAAT,GAAsD,IAArCC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAcC,EAAa,EAApBZ,MAAoB,EACzBa,mBAASD,GADgB,mBAC5CZ,EAD4C,UAGnD,OACE,yBAAKc,UAAU,SACZJ,GAAWC,EAAQ,wBAAIG,UAAU,SAChC,4BAAKJ,GAAW,IAAhB,KACA,4BAAKA,GAAW,IAAhB,KACA,4BAAKA,GAAW,IAAhB,KACA,4BAAKA,GAAW,IAAhB,KACA,4BAAKA,GAAW,IAAhB,KACA,4BAAKA,GAAW,IAAhB,MAEA,4BACE,4BAAKV,EAAMQ,QAAQjB,OACnB,4BAAKS,EAAMQ,QAAQhB,GACnB,4BAAKQ,EAAMQ,QAAQf,GACnB,4BAAKO,EAAMQ,QAAQd,GACnB,4BAAKM,EAAMQ,QAAQb,GACnB,4BAAKK,EAAMQ,QAAQZ,QAO7Ba,EAAMM,aAAe,CACnBf,MAAO,IAAIH,GAGEY,QC9BTO,EAAc,GAkBLC,MAhBf,YAAkD,IAAnBC,EAAkB,EAA9BC,WAA8B,EACXN,mBAASK,GAAkBF,GADhB,mBACxCG,EADwC,KAKzCC,GALyC,KAKhCC,MAAMC,KAAK,CAAEC,OAAQJ,IAAc,SAACK,EAAGC,GAAJ,OAAU,kBAAC,EAAD,CAAOC,IAAKD,EAAI,QAE5E,OACE,yBAAKX,UAAU,WACb,kBAAC,EAAD,CAAOJ,SAAS,IACfU,EACD,kBAAC,EAAD,CAAOT,OAAO,MCELgB,MAff,WACE,OACE,yBAAKb,UAAU,OACb,yBAAKA,UAAU,gBACb,mDACA,yBAAKA,UAAU,QACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASK,WAAY,KACrB,kBAAC,EAAD,CAASA,WAAY,SCAXS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ad8f1c2d.chunk.js","sourcesContent":["const DASH = \"-\";\nconst PULL_OFFS = \"p\";\nconst HAMMER_ONS = \"h\";\nconst SLIDES = \"s\";\nconst BENDS = \"b\";\nconst VIBRATO = \"~\";\n\nconst GUITAR_STRINGS = isNotes => ({\n    highE: isNotes && DASH,\n    b: isNotes && DASH,\n    g: isNotes && DASH,\n    d: isNotes && DASH,\n    a: isNotes && DASH,\n    lowE: isNotes && DASH\n});\n\nclass ChordModel {\n    constructor() {\n        this.notes = GUITAR_STRINGS(true);\n        this.pulloffs = GUITAR_STRINGS();\n        this.hammerons = GUITAR_STRINGS();\n        this.slides = GUITAR_STRINGS();\n        this.bends = GUITAR_STRINGS();\n        this.display = this.print();\n    }\n\n    /**\n     * Join values of guitar string for display as a js string\n     */\n    concatString = guitarString => {\n        return [\n            this.notes[guitarString],\n            this.pulloffs[guitarString],\n            this.hammerons[guitarString],\n            this.slides[guitarString],\n            this.bends[guitarString]\n        ].join(\"\");\n    };\n\n    /**\n     * Create viewable version of each guitar string\n     */\n    print = () => ({\n        highE: this.concatString(\"highE\"),\n        b: this.concatString(\"b\"),\n        g: this.concatString(\"g\"),\n        d: this.concatString(\"d\"),\n        a: this.concatString(\"a\"),\n        lowE: this.concatString(\"lowE\")\n    });\n}\n\nexport default ChordModel;\n","import React, { useState } from \"react\";\nimport \"./Chord.css\";\nimport ChordModel from \"../../../Models/chord\";\n\nfunction Chord({ isStaff, isEnd, notes: notesProp }) {\n  const [notes, setNotes] = useState(notesProp);\n\n  return (\n    <div className=\"Chord\">\n      {isStaff || isEnd ? <ul className='staff'>\n        <li>{isStaff && 'e'}|</li>\n        <li>{isStaff && 'B'}|</li>\n        <li>{isStaff && 'G'}|</li>\n        <li>{isStaff && 'D'}|</li>\n        <li>{isStaff && 'A'}|</li>\n        <li>{isStaff && 'E'}|</li>\n      </ul> :\n        <ul>\n          <li>{notes.display.highE}</li>\n          <li>{notes.display.b}</li>\n          <li>{notes.display.g}</li>\n          <li>{notes.display.d}</li>\n          <li>{notes.display.a}</li>\n          <li>{notes.display.lowE}</li>\n        </ul>\n      }\n    </div>\n  );\n}\n\nChord.defaultProps = {\n  notes: new ChordModel(),\n}\n\nexport default Chord;\n\n","import React, { useState } from \"react\";\nimport \"./Measure.css\";\nimport Chord from \"./Chord\";\n\nconst CHORD_COUNT = 80;\n\nfunction Measure({ chordCount: chordCountProp }) {\n  const [chordCount, setChordCount] = useState(chordCountProp || CHORD_COUNT)\n\n  // Quick way to create an array of N items\n  // https://stackoverflow.com/a/38213213\n  const chords = Array.from({ length: chordCount }, (v, k) => <Chord key={k + 1} />)\n\n  return (\n    <div className=\"Measure\">\n      <Chord isStaff={true} />\n      {chords}\n      <Chord isEnd={true} />\n    </div>\n  );\n}\n\nexport default Measure;\n","import React from \"react\";\nimport \"./App.css\";\nimport Measure from \"../Measure\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"AppContainer\">\n        <header>Guitar Tabs Yo!</header>\n        <div className='body'>\n          <Measure />\n          <Measure chordCount={50} />\n          <Measure chordCount={25} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}